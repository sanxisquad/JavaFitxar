/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package fitxar;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.regex.Pattern;
import fitxar.DatabaseConnection;
import fitxar.GestioProfessors;
import fitxar.Menu;
import fitxar.PasswordUtils;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.sql.Statement;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author marc
 */
public class CrearUsuari extends javax.swing.JFrame {

    private File archivoSeleccionado;

    /**
     * Creates new form Registre
     */
    public CrearUsuari(JFrame parentFrame) {
        initComponents();
        cargarRoles(ComboBoxRol);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE); // Solo cierra esta ventana
        setTitle("Crear Profesor");
        
        setLocationRelativeTo(parentFrame); // Centrar la ventana respecto al principal
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu1 = new java.awt.PopupMenu();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtNom = new javax.swing.JTextField();
        txtCognoms = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtNomUsuari = new javax.swing.JTextField();
        txtContrasenya = new javax.swing.JTextField();
        txtContrasenya1 = new javax.swing.JTextField();
        bttnRegistrar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtDNI = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        ComboBoxRol = new javax.swing.JComboBox<>();

        JLabel lblArchivo = new JLabel("Seleccionar archivo Excel:");
        JTextField txtArchivo = new JTextField(20);
        txtArchivo.setEditable(false);
        JButton btnSeleccionarArchivo = new JButton("Seleccionar");
        btnSeleccionarArchivo.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser();
                int result = fileChooser.showOpenDialog(null);
                if (result == JFileChooser.APPROVE_OPTION) {
                    archivoSeleccionado = fileChooser.getSelectedFile();
                    txtArchivo.setText(archivoSeleccionado.getAbsolutePath());
                }
            }
        });

        JPanel panelArchivo = new JPanel();
        panelArchivo.add(lblArchivo);
        panelArchivo.add(txtArchivo);
        panelArchivo.add(btnSeleccionarArchivo);

        popupMenu1.setLabel("popupMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Crear un nou professor");

        jLabel3.setText("Nom");

        jLabel4.setText("Email");

        jLabel5.setText("Congnoms");

        jLabel6.setText("Nom de usuari");

        jLabel7.setText("Contrasenya");

        jLabel8.setText("Repetir contrasenya");

        bttnRegistrar.setText("Crear");
        bttnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnRegistrarActionPerformed(evt);
            }
        });

        jLabel2.setText("DNI");

        txtDNI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDNIActionPerformed(evt);
            }
        });

        jLabel9.setText("Rol");

        ComboBoxRol.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bttnRegistrar)
                .addGap(32, 32, 32))
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(71, 71, 71)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtContrasenya)
                            .addComponent(txtContrasenya1, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(71, 71, 71)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNom, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                            .addComponent(txtCognoms)
                            .addComponent(txtEmail)
                            .addComponent(txtNomUsuari)
                            .addComponent(txtDNI)
                            .addComponent(ComboBoxRol, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(panelArchivo))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtCognoms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtNomUsuari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(ComboBoxRol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtContrasenya, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(txtContrasenya1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelArchivo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(bttnRegistrar)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bttnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnRegistrarActionPerformed
String nom = txtNom.getText().trim();
    String cognoms = txtCognoms.getText().trim();
    String email = txtEmail.getText().trim();
    String nomUsuari = txtNomUsuari.getText().trim();
    String contrasenya = txtContrasenya.getText().trim();
    String contrasenya1 = txtContrasenya1.getText().trim();
    String dni = txtDNI.getText().trim(); // Asegúrate de tener un campo para el DNI
    String nomRolSeleccionado = (String) ComboBoxRol.getSelectedItem();
    int idRol = obtenerIdRol(nomRolSeleccionado);

    if (idRol == -1) {
        JOptionPane.showMessageDialog(this, "Error al obtener el ID del rol seleccionado.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validación de campos vacíos
    if (nom.isEmpty() || cognoms.isEmpty() || email.isEmpty() || nomUsuari.isEmpty() || 
        contrasenya.isEmpty() || contrasenya1.isEmpty() || dni.isEmpty() || idRol == 0) {
        JOptionPane.showMessageDialog(this, "Si us plau, ompli tots els camps.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validar que las contraseñas coincidan
    if (!contrasenya.equals(contrasenya1)) {
        JOptionPane.showMessageDialog(this, "Les contrasenyes no coincideixen.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validar formato del DNI
    if (dni.length() > 9 || !dni.matches("[A-Za-z0-9]+")) {
        JOptionPane.showMessageDialog(this, "El DNI no és vàlid. Ha de ser alfanumèric i tenir un màxim de 9 caràcters.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Intentar registrar al usuario
    int idUsuario = registreUsuari(nom, cognoms, email, nomUsuari, contrasenya, dni, idRol);

    if (idUsuario != -1) { // Verifica si el registro fue exitoso y se obtuvo un ID
        JOptionPane.showMessageDialog(this, "Registre completat amb èxit.");
                if (getParent() != null && getParent() instanceof GestioProfessors) {
            ((GestioProfessors) getParent()).cargarProfessores();
        } else {
            // Manejar el caso en que el padre es null o no es una instancia de GestioProfessors
            System.err.println("El padre no está configurado correctamente.");
        }


        // Si se seleccionó un archivo, procesarlo y guardar los horarios
        if (archivoSeleccionado != null) {
            try {
                ExcelProcessor excelProcessor = new ExcelProcessor();
                List<Horario> horarios = excelProcessor.procesarArchivo(archivoSeleccionado);
                guardarHorarios(idUsuario, horarios); // Usar el id del usuario recién registrado
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error al procesar el archivo Excel: " + ex.getMessage());
            }
        }

        dispose(); // Cerrar el formulario después del registro exitoso
    } else {
        JOptionPane.showMessageDialog(this, "El registre no es va poder completar. Verifiqueu les dades i torneu a intentar-ho.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_bttnRegistrarActionPerformed

    private void txtDNIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDNIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDNIActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CrearUsuari.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CrearUsuari.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CrearUsuari.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CrearUsuari.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
            }
        });
    }
    public int registreUsuari(String nom, String cognoms, String email, String nomUsuari, String contrasenya, String dni, int idRol) {
    // Validar el email
     if (!esEmailValido(email)) {
        JOptionPane.showMessageDialog(this, "El correo electrónico no es válido.", "Error de Validación", JOptionPane.ERROR_MESSAGE);
        return -1;  // Retorna -1 en caso de error
    }

    // Validar el DNI
    if (dni.length() > 9 || !dni.matches("[A-Za-z0-9]+")) {
        JOptionPane.showMessageDialog(this, "El DNI no es válido. Debe ser alfanumérico y tener un máximo de 9 caracteres.", "Error de Validación", JOptionPane.ERROR_MESSAGE);
        return -1;  // Retorna -1 en caso de error
    }

    String queryVerificar = "SELECT nom_usuari, email, dni FROM usuaris WHERE nom_usuari = ? OR email = ? OR dni = ?";
    try (Connection connection = DatabaseConnection.getConnection();
         PreparedStatement preparedStatement = connection.prepareStatement(queryVerificar)) {

        preparedStatement.setString(1, nomUsuari);
        preparedStatement.setString(2, email);
        preparedStatement.setString(3, dni);

        try (ResultSet resultSet = preparedStatement.executeQuery()) {
            if (resultSet.next()) {
                String mensaje = "";
                if (nomUsuari.equals(resultSet.getString("nom_usuari"))) {
                    mensaje += "El nombre de usuario ya está en uso.\n";
                }
                if (email.equals(resultSet.getString("email"))) {
                    mensaje += "El correo electrónico ya está registrado.\n";
                }
                if (dni.equals(resultSet.getString("dni"))) {
                    mensaje += "El DNI ya está registrado.\n";
                }
                JOptionPane.showMessageDialog(this, mensaje, "Error de Validación", JOptionPane.ERROR_MESSAGE);
                return -1;  // Retorna -1 si ya existe un registro
            }
        }

        // Generar la sal
        String salt = PasswordUtils.generarSalt();
        // Hashear la contraseña con la sal
        String contrasenyaHasheada = PasswordUtils.hashPassword(contrasenya, salt);

        // Insertar usuario con DNI, sal y contraseña hasheada
        String queryInsertar = "INSERT INTO usuaris (nom, cognoms, email, nom_usuari, password, salt, dni, rol) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement insertStatement = connection.prepareStatement(queryInsertar, Statement.RETURN_GENERATED_KEYS)) {
            insertStatement.setString(1, nom);
            insertStatement.setString(2, cognoms);
            insertStatement.setString(3, email);
            insertStatement.setString(4, nomUsuari);
            insertStatement.setString(5, contrasenyaHasheada);
            insertStatement.setString(6, salt); // Guardar la sal
            insertStatement.setString(7, dni); // Guardar el DNI
            insertStatement.setInt(8, idRol); // Guardar el ID del rol

            int filasInsertadas = insertStatement.executeUpdate();

            if (filasInsertadas > 0) {
                // Obtener el ID generado del usuario
                try (ResultSet generatedKeys = insertStatement.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        int idGenerado = generatedKeys.getInt(1); // Obtiene el ID generado
                        JOptionPane.showMessageDialog(this, "Usuario registrado con éxito.");
                        // Asegúrate de que solo se abra el menú si no está ya abierto
                        if (!Menu.isMenuAbierto()) { // Este método verifica si el menú ya está abierto
                            new Menu().setVisible(true);
                        }
                        return idGenerado; // Retorna el ID del usuario
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo completar el registro.", "Error", JOptionPane.ERROR_MESSAGE);
                return -1;  // Retorna -1 si no se pudo insertar
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al ejecutar la consulta: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        return -1;  // Retorna -1 en caso de error
    }
    return -1;  // Retorna -1 en caso de fallo general
}
private void guardarHorarios(int usuariId, List<Horario> horarios) {
    String queryInsertarHorarios = "INSERT INTO horarios_clase (usuari_id, dia, hora_inicio, hora_fin) VALUES (?, ?, ?, ?)";
    String queryActualizarTeHorari = "UPDATE usuaris SET teHorari = TRUE WHERE id = ?";

    try (Connection connection = DatabaseConnection.getConnection();  // Obtener la conexión
         PreparedStatement stmt = connection.prepareStatement(queryInsertarHorarios);
         PreparedStatement stmtUpdate = connection.prepareStatement(queryActualizarTeHorari)) {

        // Iterar sobre los horarios y guardar en la base de datos
        for (Horario horario : horarios) {
            // Asegúrate de que la hora de inicio y fin estén en formato correcto
            String horaInicio = formatearHora(horario.getHoraInicio().split(" - ")[0]);  // Hora de inicio
            String horaFin = formatearHora(horario.getHoraInicio().split(" - ")[1]);  // Hora de fin
            
            // Establecer los valores en el prepared statement para los horarios
            stmt.setInt(1, usuariId);    // ID del profesor
            stmt.setString(2, horario.getDia()); // Día de la semana
            stmt.setString(3, horaInicio); // Hora de inicio en formato "HH:mm"
            stmt.setString(4, horaFin); // Hora de fin en formato "HH:mm"
            stmt.addBatch();  // Agregar al batch
        }

        // Ejecutar el batch de inserción de horarios
        stmt.executeBatch(); 
        System.out.println("Horarios guardados correctamente en la base de datos.");

        // Ahora actualizamos el campo teHorari a true en la tabla usuaris
        stmtUpdate.setInt(1, usuariId);  // Establecemos el ID del usuario
        int filasActualizadas = stmtUpdate.executeUpdate();  // Ejecutar el UPDATE

        if (filasActualizadas > 0) {
            System.out.println("El campo teHorari se ha actualizado a true para el usuario con ID: " + usuariId);
        } else {
            System.err.println("No se pudo actualizar el campo teHorari.");
        }

    } catch (SQLException e) {
        System.err.println("Error al guardar los horarios o actualizar el campo teHorari: " + e.getMessage());
    }
}


private String formatearHora(String hora) {
    // Validar si la hora está en formato correcto "HH:mm"
    String[] partes = hora.split(":");
    if (partes.length == 2) {
        String horaParte = partes[0];
        String minutosParte = partes[1];

        // Asegurarnos de que ambos valores tengan dos dígitos (ej. "09" en lugar de "9")
        if (horaParte.length() == 1) {
            horaParte = "0" + horaParte;
        }
        if (minutosParte.length() == 1) {
            minutosParte = "0" + minutosParte;
        }

        return horaParte + ":" + minutosParte;
    } else {
        throw new IllegalArgumentException("Formato de hora inválido: " + hora);
    }
}



    
    private boolean esEmailValido(String email) {
    String regex = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$";
    Pattern pattern = Pattern.compile(regex);
    return pattern.matcher(email).matches();
}
    private void cargarRoles(JComboBox<String> comboBox) {
    String query = "SELECT id_rol, nom_rol FROM rols_usuaris";
    try (Connection connection = DatabaseConnection.getConnection();
         PreparedStatement preparedStatement = connection.prepareStatement(query);
         ResultSet resultSet = preparedStatement.executeQuery()) {

        // Usa un mapa para asociar nombres de roles con sus IDs
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        comboBox.setModel(model);

        while (resultSet.next()) {
            String nomRol = resultSet.getString("nom_rol");
            model.addElement(nomRol);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al cargar roles: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    private int obtenerIdRol(String nomRol) {
    String query = "SELECT id_rol FROM rols_usuaris WHERE nom_rol = ?";
    try (Connection connection = DatabaseConnection.getConnection();
         PreparedStatement preparedStatement = connection.prepareStatement(query)) {

        preparedStatement.setString(1, nomRol);

        try (ResultSet resultSet = preparedStatement.executeQuery()) {
            if (resultSet.next()) {
                return resultSet.getInt("id_rol");
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al obtener el ID del rol: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    return -1; // Retorna -1 en caso de error
}



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxRol;
    private javax.swing.JButton bttnRegistrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private java.awt.PopupMenu popupMenu1;
    private javax.swing.JTextField txtCognoms;
    private javax.swing.JTextField txtContrasenya;
    private javax.swing.JTextField txtContrasenya1;
    private javax.swing.JTextField txtDNI;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNom;
    private javax.swing.JTextField txtNomUsuari;
    // End of variables declaration//GEN-END:variables
}
